// Sockevt.js v0.1.2
// Github https://github.com/Jakub21/sockevt.js
// MIT License
const io = require('socket.io-client');const {EventHandler} = require('./EventHandler.js');const {Event} = require('./Event.js');
class Client { constructor(address, port) { this.name = 'SocketClient'; this.handler = new EventHandler(); this.io = io(`${address}:${port}`); } connect() { this.io.on('connect', () => {this.push(new Event('connect', {}));}); this.io.on('event', (evt) => {this.push(new Event(evt.id, evt.data));}); this.io.on('disconnect', () => {this.push(new Event('close', {}));}); this.io.on('pong', (evt) => {this.push(new Event('pong', {}));}); this.io.on('ping', (evt) => {this.io.emit('pong');}); } on(key, callback) { this.handler.addHandler(key, callback); } push(evt) { this.handler.push(evt); } transmit(evt) { if (!this.io.connected) throw new TypeError('Socket is not connect'); this.io.emit('event', evt); } handlePendingEvents() { while (this.handler.handleNext()) { continue; } }}exports.Client = Client;
class Event { constructor(id, data, socket=null) { this.id = id; this.data = data; this.time = Date.now(); this.socket = socket; } getClean() { var clone = Object.assign({}, this); delete clone.socket; return clone; }}exports.Event = Event;
class EventHandler { constructor() { this.events = []; this.handlers = {}; this.warnings = []; } handleNext() { var evt = this.events.shift(); if (evt == undefined) return false; if (this.handlers[evt.id] == undefined) { if (!this.warnings.includes(evt.id)) { this.warnings.push(evt.id); console.warn(`Event "${evt.id}" has no handlers assigned`); } return true; } for (var handler of this.handlers[evt.id]) handler(evt); return true; } addHandler(id, callback) { if (this.handlers[id] == undefined) this.handlers[id] = []; this.handlers[id].push(callback); } push(evt) { this.events.push(evt); }}exports.EventHandler = EventHandler;const http = require('http');const Socket = require('socket.io');const {EventHandler} = require('./EventHandler.js');const {Event} = require('./Event.js');
class Server { constructor(address, port) { this.name = 'SocketServer'; this.http = http.createServer().listen(port); this.io = new Socket(this.http); this.handler = new EventHandler(); this.bindSocketEvents(); } bindSocketEvents() { this.io.on('connection', (socket) => { var socketData = {socket}; this.push(new Event('connect', {}, socket)); socket.on('event', (evt) => { this.push(new Event(evt.id, evt.data, socket)); }); socket.on('disconnect', (evt) => { this.push(new Event('close', {}, socket)); }); socket.on('pong', (evt) => { this.push(new Event('pong', {}, socket)); }); socket.on('ping', (evt) => { socket.transmit(new Event('pong', {}, socket)); }); }); } on(key, callback) { this.handler.addHandler(key, callback); } push(evt) { this.handler.push(evt); } transmit(evt) { evt.socket.emit('event', evt.getClean()); } handlePendingEvents() { while (this.handler.handleNext()) { continue; } }}exports.Server = Server;
